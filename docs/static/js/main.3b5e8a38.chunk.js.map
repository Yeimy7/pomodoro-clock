{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Session","session","setSession","id","onClick","class","Breaking","breaking","setBreaking","App","inter","useState","min","s","sw","sw2","titlee","document","getElementById","className","a","clock","setInterval","m","ss","innerText","play","clearInterval","pause","currentTime","preload","ref","React","createRef","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b5e8a38.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [session, setSession] = useState(25);\n  const [breaking, setBreaking] = useState(5);\n\n  let inter;\n  let min = session;\n  let s = 0;\n  let sw = true;\n  let sw2 = true;\n\n  const titlee = document.getElementById('timer-label');\n\n  const handleClock = () => {\n    let a = document.getElementById('beep');\n    if (sw2) {\n      let clock = document.getElementById('time-left');\n      inter = setInterval(() => {\n        let m = min < 10 ? '0' + min : min;\n        let ss = s < 10 ? '0' + s : s;\n        clock.innerText = m + ':' + ss;\n        s--;\n        if (s < 0) {\n          s = 59;\n          min--;\n          if (min < 0) {\n            if (sw) {\n              min = breaking;\n              titlee.innerText = 'Break';\n              a.play();\n            } else {\n              min = session;\n              titlee.innerText = 'Session';\n              a.play();\n            }\n            sw = !sw;\n            s = 0;\n          }\n        }\n\n      }, 1000);\n    } else {\n      clearInterval(inter);\n    }\n    sw2 = !sw2;\n  }\n  const Restart = () => {\n    const titlee = document.getElementById('timer-label');\n    const a = document.getElementById('beep');\n    let clock = document.getElementById('time-left');\n    titlee.innerText = 'Session';\n    clearInterval(inter);\n    min = session - 1;\n    s = 59;\n    sw = true;\n    sw2 = true;\n    setSession(25);\n    setBreaking(5);\n    clock.innerText = session + ':00';\n    a.pause();\n    a.currentTime = 0;\n  }\n\n\n\n  return (\n    <div className='container'>\n      <div id=\"timer-label\" className='wrapper'>\n        Session\n      </div>\n      <div id=\"time-left\" className='wrapper'>\n        {(sw) ? (session < 10) ? '0' + session + ':00' : session + ':00' : (breaking < 10) ? '0' + breaking + ':00' : breaking + ':00'}\n      </div>\n      <div className='wrapper'>\n        <button id=\"start_stop\" onClick={handleClock}><i class=\"fas fa-play\"></i><i class=\"fas fa-pause\"></i></button>\n        <button id=\"reset\" onClick={Restart}><i class=\"fas fa-power-off\"></i></button>\n      </div>\n      <div className='controls'>\n        <div className='control-btn'>\n          <h2 id='session-label'>Session Length</h2>\n          <Session session={session} setSession={setSession} />\n        </div>\n        <div className='control-btn'>\n          <h2 id='break-label'>Break Length</h2>\n          <Breaking breaking={breaking} setBreaking={setBreaking} />\n        </div>\n      </div>\n\n\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        ref={React.createRef()}\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      />\n    </div>\n  )\n}\n\nconst Session = ({ session, setSession }) => {\n\n  const handleIncrement = () => {\n    session < 60 && setSession(session + 1);\n  }\n  const handleDecrement = () => {\n    session > 1 && setSession(session - 1);\n  }\n  return (\n    <div>\n      <button id=\"session-increment\" onClick={handleIncrement}><i class=\"fas fa-arrow-up\"></i></button>\n      <span id=\"session-length\">{session}</span>\n      <button id=\"session-decrement\" onClick={handleDecrement}><i class=\"fas fa-arrow-down\"></i></button>\n    </div>\n  )\n}\n\nconst Breaking = ({ breaking, setBreaking }) => {\n  const handleIncrement = () => {\n    breaking < 60 && setBreaking(breaking + 1);\n  }\n  const handleDecrement = () => {\n    breaking > 1 && setBreaking(breaking - 1);\n  }\n  return (\n    <div>\n      <button id=\"break-increment\" onClick={handleIncrement}><i class=\"fas fa-arrow-up\"></i></button>\n      <span id=\"break-length\">{breaking}</span>\n      <button id=\"break-decrement\" onClick={handleDecrement}><i class=\"fas fa-arrow-down\"></i></button>\n    </div>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}